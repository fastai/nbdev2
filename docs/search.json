[
  {
    "objectID": "03_quarto.html",
    "href": "03_quarto.html",
    "title": "nbdev2",
    "section": "",
    "text": "Filter for quarto processing\n\n\ns = Path('../tests/docs_test.ipynb').read_text()\nres = filter_quarto(s)\n\n\n#skip\nfrom nbprocess.export import nbs_export\nnbs_export()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "qdocs",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "02_convert.html",
    "href": "02_convert.html",
    "title": "nbdev2",
    "section": "",
    "text": "Utilities that help you go from .ipynb -> .md\n\nYou can use export_docs to recursively convert a directory of notebooks to markdown files.\n\nexport_docs('../tests', recursive=False, dest='../tests', n_workers=0)\n_test_nbs = globtastic('../tests', file_glob='*.ipynb', skip_folder_re='^[_.]').map(Path)\n\nfor f in _test_nbs:\n    _dest = f.with_suffix('.md')\n    assert _dest.exists(), f'{_dest} does not exist.'\n    if _dest.name == 'index.md': assert (_dest.parent/'README.md').exists(), f'README.md was not created from index.ipynb.'\n\nNo notebooks were modified.\n\n\nThe modified times of notebooks are introspected such notebooks that havenâ€™t changed after markdown files have been created will not be converted:\n\nexport_docs('../tests', recursive=False, dest='../tests')\n\nNo notebooks were modified.\n\n\nHowever, you can set force_all = True to force notebooks to convert:\n\nexport_docs('../tests', recursive=False, force_all=True, dest='../tests')\n\nconverting: ../tests/docs_test.ipynb\nconverting: ../tests/index.ipynb\n\n\n\nfrom nbprocess.export import nbs_export\nnbs_export()"
  },
  {
    "objectID": "01_docexp.html",
    "href": "01_docexp.html",
    "title": "nbdev2",
    "section": "",
    "text": "Custom preprocessors that help convert notebook content into markdown\n\n\n\n\n\n\nThese preprocessors allow you to make special comments to enable/disable them. Here is a list of all special comments:\nAll comments start with #meta or #cell_meta, which are both aliases for the same thing. For brevity, we will use #meta in this cheatsheet.\n\n\n\nRemove entire cells: #meta:tag=remove_cell or #meta:tag=hide\nRemove output: #meta:tag=remove_output or #meta:tag=remove_output or #meta:tag=hide_outputs or #meta:tag=hide_output\nRemove input: same as above, except input instead of output.\n\nTo inject metadata make a comment in a cell with the following pattern: #cell_meta:{key=value}. Note that #meta is an alias for #cell_meta\nFor example, at the moment, this notebook has no cells with metadata, which we can see b using ShowMeta:\n\n_test_file = '../tests/docs_test.ipynb'\n_run_preprocessor([ShowMeta], _test_file);\n\nHowever, after we process this notebook with InjectMeta, the appropriate metadata will be injected:\n\nc, _ = _run_preprocessor([InjectMeta, ShowMeta], _test_file)\n\n{'show_steps': 'start,train'}\n{'tag': 'remove_output'}\n{'tag': 'remove_input'}\n{'tag': 'remove_cell'}\n{'tags': 'remove_input,remove_output'}\n{'filter_words': 'FutureWarning,MultiIndex'}\n\n\nGets rid of colors that are streamed from standard out, which can interfere with static site generators:\n\nc, _ = _run_preprocessor([StripAnsi], _test_file)\nassert not _re_ansi_escape.findall(c)\n\nThis preprocessor inserts a warning in the markdown destination that the file is autogenerated. This warning is inserted in the second cell so we do not interfere with front matter.\n\nc, _ = _run_preprocessor([InsertWarning], _test_file)\nassert \"<!-- WARNING: THIS FILE WAS AUTOGENERATED!\" in c\n\n\nc, _ = _run_preprocessor([RmEmptyCode], _test_file)\nassert '```python\\n\\n```' not in c\n\nUpdateTags is meant to be used with InjectMeta and TagRemovePreprocessor to configure the visibility of cells in rendered docs.\n\n# Configure an exporter from scratch\nc = Config()\nc.TagRemovePreprocessor.remove_cell_tags = (\"remove_cell\",)\nc.TagRemovePreprocessor.remove_all_outputs_tags = ('remove_output',)\nc.TagRemovePreprocessor.remove_input_tags = ('remove_input',)\nc.MarkdownExporter.preprocessors = [InjectMeta, UpdateTags, TagRemovePreprocessor]\nexp = MarkdownExporter(config=c)\nresult = exp.from_filename(_test_file)[0]\n\n# show the results\nassert 'you will not be able to see this cell at all either' not in result\n\n\nc, _ = _run_preprocessor([InjectMeta, HideInputLines], _test_file)\n\n_res = \"\"\"```python\ndef show():\n    a = 2\n```\"\"\"\nassert _res in c\n\nIf we want to exclude output with certain keywords, we can use the #meta:filter_words comment. For example, if we wanted to ignore all output that contains the text FutureWarning or MultiIndex we can use the comment:\n#meta:filter_words=FutureWarning,MultiIndex\n\nc, _ = _run_preprocessor([InjectMeta, FilterOutput], _test_file)\n_res=\"    A line\\n    Another line.\"\nassert _res in c\n\n\nc, _ = _run_preprocessor([CleanFlags], _test_file)\nassert '#notest' not in c\n\nCleanMagics strips magic cell commands %% so they do not appear in rendered markdown files:\n\nc, _ = _run_preprocessor([CleanMagics], _test_file)\nassert '%%' not in c\n\nWhen we issue a shell command in a notebook with !, we need to change the code-fence from python to bash and remove the !:\n\nc, _ = _run_preprocessor([BashIdentify], _test_file)\nassert \"```bash\" in c\n\n\n_result, _ = _run_preprocessor([CleanShowDoc], _test_file)\nassert '<HTMLRemove>' not in _result\n\n\nc, _ = _run_preprocessor([RmHeaderDash], '../tests/docs_test.ipynb')\nassert 'some words' in c\nassert 'A heading to Hide' not in c and 'Another Heading' not in c and 'Yet another heading to hide' not in c\n\n\nc, _ = _run_preprocessor([RmExport], '../tests/docs_test.ipynb')\nassert not 'dontshow' in c\n\n\n\n\n\nLets see how you can compose all of these preprocessors together to process notebooks appropriately:\n\n#When No argument for dest is passed, it will build things in the same directory as the notebook\n_exp = doc_exporter(default_pps())\n_test_fname = Path('../tests/docs_test.ipynb')\n\n_dest_file = Path(_test_fname).with_suffix('.md')\n_dest_file.unlink(missing_ok=True)\nnb2md(_test_fname, _exp)\nassert _dest_file.exists(), f'{_dest_file} does not exist.'\n\n\n#When an argument for dest is passed, it will build things in the dest directory\n_test_dest = Path('build')\n_test_outp = _test_dest/'docs_test'\n_test_file = _test_dest/'docs_test.md'\n_test_file.unlink(missing_ok=True)\nif _test_outp.exists():\n    [p.unlink(missing_ok=True) for p in _test_outp.ls()]\n    _test_outp.rmdir()\n\nnb2md(_test_fname, _exp, dest=_test_dest)\nassert _test_file.exists() # make sure the markdown file does exist\nassert _test_outp.exists() # make sure the images folder exists\nassert len(_test_file.readlines()) > 10\nassert _test_outp.ls()\n\n\n_test_file.unlink(missing_ok=True)\n\n\nfrom nbprocess.export import nbs_export\nnbs_export()"
  }
]